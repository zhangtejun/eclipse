<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.2.xsd ">

    	<context:annotation-config/>
<!-- 	<context:component-scan base-package="myPackage"/> -->
    
    
	<!-- 配置Handler -->
<!-- 	<bean id="itemsController1" name="/queryItems_test.action" class="cn.itcast.ssm.controller.ItemsController1" /> -->
	<!-- 配置另外一个Handler -->
<!-- 	<bean id="itemsController1" name="/do.do" class="com.zh.itemsController1"> -->
<!-- 	    <property name="helloDAO"> -->
<!-- 	        <ref bean="helloDAO"/> -->
<!-- 	    </property> -->
<!-- 	</bean> -->

	  <context:property-placeholder location="classpath:db.properties"/>
	<bean id="urlMapping" class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" />
		
	<!--简单url映射  -->
<!-- 	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"> -->
<!-- 	      <property name="mappings"> -->
<!-- 			<props> -->
<!-- 				对itemsController1进行url映射，url是/queryItems1.action -->
<!-- 				<prop key="/do.do">itemsController1</prop> -->
<!-- 			</props> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	

	<!-- 处理器适配器 所有处理器适配器都实现 HandlerAdapter接口 -->
	<bean
		class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />
	<!-- 另一个非注解的适配器 -->
	<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"/>

	<!-- 视图解析器
	解析jsp解析，默认使用jstl标签，classpath下的得有jstl的包
	 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置jsp路径的前缀 -->
		<property name="prefix" value="/WEB-INF/zh_CN/"/>
		<!-- 配置jsp路径的后缀 -->
		<property name="suffix" value=".jsp"/>
	</bean>
<!-- 	国际化 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<value>classpath:/config/i18n/constants_zh_CN</value>
		</property>
		 <property name="fallbackToSystemLocale"><value>false</value></property> 
		<property name="defaultEncoding">
			<value>GBK</value>
		</property> 
		<property name="cacheSeconds" value="10"></property>
<!-- 		<property name="basenames"> -->
<!-- 			<list> -->
<!-- 				<value>classpath:messages</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
	</bean>
<!-- 异常处理 -->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
			    <prop key="java.sql.SQLException">error</prop>
			    <prop key="java.sql.IOException">error</prop>
			    <prop key="org.springframework.transaction.CannotCreateTransactionException">error</prop>
			</props>
				</property> 
	</bean>
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${driverClassName}">
		</property> 
		<property name="url" value="${url}">
		</property> 
		<property name="username" value="${username}">
		</property> 
		<property name="password" value="${password}">
		</property> 
<!-- 		<property name="initialSize" value="${initialSize}"> -->
<!-- 		</property>  -->
<!-- 		<property name="maxActive" value="${maxActive}"> -->
<!-- 		</property>  -->
<!-- 		<property name="maxIdle" value="${maxIdle}"> -->
<!-- 		</property>  -->
<!-- 		<property name="minIdle" value="${minIdle}"> -->
<!-- 		</property>  -->
	</bean>
<!-- 	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean"> -->
<!-- 	   <property name="configLocation"> -->
<!-- 	       <value>classpath:/config/sqlMapConfig.xml</value> -->
<!-- 	   </property>  -->
<!-- 	</bean> -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	   <property name="dataSource">
	       <ref bean="perDataSource"/><!-- perDataSource jndi -->
	   </property> 
	</bean>
	


<!-- sql start		 -->
	<!-- 多数据源访问辅助类 -->
	<bean id="multiJdbcAccess" class="com.shop.jdbc.MultiJdbcAccess">
	    <property name="sqlMapRegister">
	        <map>
	            <entry key="default" value-ref="perSqlMapExecutorTemplate"></entry>
	            <entry key="per" value-ref="perSqlMapExecutorTemplate"></entry>
	        </map>
	    </property>
	</bean>
		<bean id="perSqlMapExecutorTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
		    <property name="sqlMapClient"><ref bean="sqlMapClient"/></property>
<!-- 		   <property name="dataSource"> -->
<!-- 		       <ref bean="dataSource"/> -->
<!-- 		   </property>  -->
		</bean>
		<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation">
		    <value>classpath:/config/sqlMapConfig.xml</value>
		</property>
		   <property name="dataSource">
		       <ref bean="perDataSource"/>
		   </property> 
		</bean>
	<!-- 	Resourceref表示是否在J2ee容器中查找数据源。 -->
<!--  resourceref属性为true ，表示在容器中查找数据源 -->
<!-- resourceref属性为false ，表示不在容器中查找数据源。 -->
<!-- 如果resourceref属性为false，又想在容器中查找的话，可以在jndiName属性的值前加java:comp/env前缀，否则就会报Name test is not bound in this Context异常。 -->
<!-- 	 name="jdbc/TestDB"  JNDI数据源的name -->
<!-- type="javax.sql.DataSource" -->
<!-- driverClassName="com.mysql.jdbc.Driver" JDBC驱动类 -->
<!-- url="" -->
<!-- username="" 访问数据库用户名 -->
<!-- password="" 访问数据库的密码 -->
<!-- maxActive="80" 最大活动连接 -->
<!-- initialSize="10"  初始化连接 -->
<!-- maxIdle="60"   最大空闲连接 -->
<!-- minIdle="10"   最小空闲连接 -->
<!-- maxWait="3000" 从池中取连接的最大等待时间，单位ms. -->
<!-- validationQuery = "SELECT 1"  验证使用的SQL语句 -->
<!-- testWhileIdle = "true"      指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除. -->
<!-- testOnBorrow = "false"   借出连接时不要测试，否则很影响性能 -->
<!-- timeBetweenEvictionRunsMillis = "30000"  每30秒运行一次空闲连接回收器 -->
<!-- minEvictableIdleTimeMillis = "1800000"  池中的连接空闲30分钟后被回收 -->
<!-- numTestsPerEvictionRun="3" 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
<!-- removeAbandoned="true"  连接泄漏回收参数，当可用连接数少于3个时才执行 -->
<!-- removeAbandonedTimeout="180"  连接泄漏回收参数，180秒，泄露的连接可以被删除的超时值 -->

	<bean id="perDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
		    <value>${datasource.jndiName}</value>
		</property>
		<property name="resourceRef" value="false"></property>
	</bean>		
<!-- sql end		 -->
	    <bean id="login" class="com.shop.test.login">
<!-- 	    <property name="MultiJdbcAccess"> -->
<!-- 	        <ref bean="multiJdbcAccess"/> -->
<!-- 	    </property> -->
	</bean>		

	<bean id="BaseService" class="com.shop.action.user.BaseService">
	   <property name="multiJdbcAccess">
	       <ref bean="multiJdbcAccess"/>
	   </property> 
	</bean>	
	<bean id="customerDao" class="com.shop.dao.user.CustomerDaoImpl" parent="BaseService">
	</bean>	
		
	 <bean id="CustomerAction" class="com.shop.action.user.CustomerAction">
	   <property name="customerDao">
	       <ref bean="customerDao"/>
	   </property> 
	</bean>
	<bean id="adminDao" class="com.shop.dao.user.AdminDaoImpl" parent="BaseService">
	</bean>	
		
	 <bean id="AdminAction" class="com.shop.action.user.AdminAction">
	   <property name="adminDao">
	       <ref bean="adminDao"/>
	   </property> 
	</bean>
	<bean id="subAdminDao" class="com.shop.dao.user.SubAdminDaoImpl" parent="BaseService">
	</bean>	
		
	 <bean id="SubAdminAction" class="com.shop.action.user.AdminSubAction">
	   <property name="subAdminDao">
	       <ref bean="subAdminDao"/>
	   </property> 
	</bean>
	
			  	
</beans>